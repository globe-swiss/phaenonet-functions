name: "Remove Firebase Extensions"
description: "Remove all Firebase extensions from a project"
inputs:
  project:
    description: "Firebase project ID"
    required: true
  workload-identity-provider:
    description: "GCP Workload Identity Provider"
    required: true
  service-account:
    description: "GCP Service Account"
    required: true
  node-version:
    description: "Node.js version"
    required: true
runs:
  using: "composite"
  steps:
    - name: Setup Node ${{ inputs.node-version }}
      uses: actions/setup-node@v6.0.0
      with:
        node-version: ${{ inputs.node-version }}
    - name: install firebase-tools
      shell: bash
      run: npm i -g firebase-tools
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v3.0.0
      with:
        workload_identity_provider: ${{ inputs.workload-identity-provider }}
        service_account: ${{ inputs.service-account }}
        create_credentials_file: true
    - name: Remove Firebase Extensions One by One
      shell: bash
      working-directory: firebase
      run: |
        # Needs one by one extension, as firebase deploy fails if deleting multiple at once - known bug
        # Extract extension names from firebase.json and uninstall each one

        # Get list of installed extensions from Firebase server
        echo "Fetching list of installed extensions from ${INPUTS_PROJECT}..."
        ext_list_json=$(firebase ext:list --project ${INPUTS_PROJECT} --json)
        installed_extensions=$(echo "$ext_list_json" | jq -r '.result[].instanceId' 2>/dev/null || echo "")

        if [ -z "$installed_extensions" ]; then
          echo "No extensions currently installed in ${INPUTS_PROJECT}"
          exit 0
        fi

        echo "Found the following extensions installed on server:"
        echo "$installed_extensions"
        echo "===================="

        # Backup original firebase.json
        cp firebase.json firebase.json.backup

        # Filter firebase.json to only keep installed extensions
        echo "Filtering firebase.json to only keep installed extensions..."

        # Get all extension keys from firebase.json
        all_extensions=$(jq -r '.extensions | keys[]' firebase.json)

        # Remove extensions not installed on server
        for ext in $all_extensions; do
          if ! echo "$installed_extensions" | grep -q "^$ext$"; then
            echo "Removing $ext from firebase.json (not installed on server)"
            jq --arg ext "$ext" 'del(.extensions[$ext])' firebase.json > firebase.json.tmp
            mv firebase.json.tmp firebase.json
          fi
        done

        echo "Filtered firebase.json now contains:"
        jq '.extensions' firebase.json
        echo "===================="

        # Remove extensions one by one
        for ext in $installed_extensions; do
          echo "Removing extension: $ext"
          # Uninstall from manifest (continue on error)
          firebase ext:uninstall "$ext" --force --project ${INPUTS_PROJECT} || echo "Extension $ext may not exist, continuing..."
          # Deploy the removal immediately
          echo "Deploying removal of $ext"
          firebase deploy --force --only extensions --project ${INPUTS_PROJECT} || echo "Deploy for $ext removal failed, continuing..."
          # Small delay to allow IAM propagation
          sleep 5
        done

        # Restore original firebase.json
        mv firebase.json.backup firebase.json
      env:
        INPUTS_PROJECT: ${{ inputs.project }}
    - name: Verify All Extensions Removed
      shell: bash
      working-directory: firebase
      run: |
        echo "Checking for remaining extensions..."
        remaining=$(firebase ext:list --project ${INPUTS_PROJECT} --json | jq -r '.result[].instanceId' 2>/dev/null || echo "")

        if [ -n "$remaining" ]; then
          echo "ERROR: The following extensions are still installed:"
          echo "$remaining"
          exit 1
        else
          echo "âœ“ All extensions successfully removed"
        fi

      env:
        INPUTS_PROJECT: ${{ inputs.project }}
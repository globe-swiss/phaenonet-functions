name: 'Deploy Firebase Extensions'
description: 'Deploy Firebase extensions to a project'
inputs:
  project:
    description: 'Firebase project ID'
    required: true
  workload-identity-provider:
    description: 'GCP Workload Identity Provider'
    required: true
  service-account:
    description: 'GCP Service Account'
    required: true
  node-version:
    description: 'Node.js version'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Setup Node ${{ inputs.node-version }}
      uses: actions/setup-node@v4.4.0
      with:
        node-version: ${{ inputs.node-version }}
    - name: install firebase-tools
      shell: bash
      run: npm i -g firebase-tools
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2.1.10
      with:
        workload_identity_provider: ${{ inputs.workload-identity-provider }}
        service_account: ${{ inputs.service-account }}
        create_credentials_file: true
    - name: Deploy Firebase Extensions One by One
      shell: bash
      working-directory: firebase
      run: |
        # Installation fails silently if multiple extensions are deployed at once
        # This is a workaround to ensure each extension is deployed successfully
        # Deploy extensions one by one by progressively adding to firebase.json
        echo "Starting one-by-one extension deployment..."

        # Backup original firebase.json
        cp firebase.json firebase.json.backup

        # Start with empty extensions object
        jq '.extensions = {}' firebase.json.backup > firebase.json

        # Extract all extensions from the original file
        extension_names=$(jq -r '.extensions | keys[]' firebase.json.backup)

        # Deploy each extension individually by adding it progressively
        for ext_name in $extension_names; do
          echo "===================="
          echo "Deploying extension: $ext_name"

          # Add this extension to the current firebase.json
          ext_config=$(jq --arg ext "$ext_name" '.extensions[$ext]' firebase.json.backup)
          jq --arg ext "$ext_name" --argjson config "$ext_config" '.extensions[$ext] = $config' firebase.json > firebase.json.tmp
          mv firebase.json.tmp firebase.json

          # Deploy with the updated extensions list
          firebase deploy --force --only extensions --project ${{ inputs.project }}

          if [ $? -eq 0 ]; then
            echo "✓ Successfully deployed $ext_name"
          else
            echo "✗ Failed to deploy $ext_name"
            exit 1
          fi

          # Wait to ensure proper deployment
          echo "Waiting for extension to be fully initialized..."
          sleep 15
        done

        echo "===================="
        echo "✓ All extensions successfully deployed one by one"

name: deploy cloud functions

on:
  workflow_dispatch:
    inputs:
      project:
        description: Project
        required: true
        default: phaenonet-test
        type: choice
        options:
          - phaenonet
          - phaenonet-test
      function:
        description: Function
        required: true
        type: choice
        options:
          - all
          - fs_observations_write
          - fs_users_write
          - fs_invites_write
          - fs_users_write__ts
          - fs_observations_write__ts
          - fs_individuals_write__ts
          - fs_definitions_write__ts
          - fs_invites_write__ts
          - fs_individuals_write
          - http_observations_write__analytics
          - http_individuals_write__map
          - http_iot_dragino
          - http_promote_ranger
          - ps_iot_dragino
          - ps_import_meteoswiss_data
          - ps_export_meteoswiss_data
          - ps_rollover_phenoyear
          - st_appspot_finalize
          - test
          - e2e_clear_individuals
      action:
        description: Action
        required: true
        default: deploy
        type: choice
        options:
          - deploy
          - undeploy
          - redeploy
      tag:
        description: Tag
        required: false
        type: string

env:
  RUNTIME: python310
  REGION: europe-west1
  TIMEOUT: 540s
  PROJECT: ${{ github.event.inputs.project }}
  FUNCTION: ${{ github.event.inputs.function }}
  ACTION: ${{ github.event.inputs.action }}
  TAG: ${{ github.event.inputs.tag }}

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    container: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    continue-on-error: false
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        include:
          - name: fs_observations_write
            entrypoint: fs_observations_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/observations/{observation_id}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: http_observations_write__analytics
            entrypoint: http_observations_write__analytics
            trigger: --trigger-http
          - name: fs_users_write
            entrypoint: fs_users_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/users/{user_id}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: fs_invites_write
            entrypoint: fs_invites_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/invites/{invite_id}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: ps_import_meteoswiss_data
            entrypoint: ps_import_meteoswiss_data
            trigger: --trigger-resource import_meteoswiss_data --trigger-event google.pubsub.topic.publish
          - name: ps_export_meteoswiss_data
            entrypoint: ps_export_meteoswiss_data
            trigger: --trigger-resource export_meteoswiss_data --trigger-event google.pubsub.topic.publish
          - name: st_appspot_finalize
            entrypoint: st_appspot_finalize
            trigger: --trigger-resource "$PROJECT.appspot.com" --trigger-event google.storage.object.finalize
          - name: ps_rollover_phenoyear
            entrypoint: ps_rollover_phenoyear
            trigger: --trigger-resource rollover_phenoyear --trigger-event google.pubsub.topic.publish
          - name: fs_users_write__ts
            entrypoint: fs_document_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/users/{document}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: fs_observations_write__ts
            entrypoint: fs_document_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/observations/{document}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: fs_individuals_write__ts
            entrypoint: fs_document_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/individuals/{document}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: fs_definitions_write__ts
            entrypoint: fs_document_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/definitions/{document}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: fs_invites_write__ts
            entrypoint: fs_document_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/invites/{document}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: fs_individuals_write
            entrypoint: fs_individuals_write
            trigger: --trigger-resource "projects/$PROJECT/databases/(default)/documents/individuals/{document}" --trigger-event providers/cloud.firestore/eventTypes/document.write
          - name: http_individuals_write__map
            entrypoint: http_individuals_write__map
            trigger: --trigger-http
          - name: http_iot_dragino
            entrypoint: http_iot_dragino
            trigger: --trigger-http --allow-unauthenticated
          - name: ps_iot_dragino
            entrypoint: ps_iot_dragino
            trigger: --trigger-resource iot_dragino --trigger-event google.pubsub.topic.publish
          - name: http_promote_ranger
            entrypoint: http_promote_ranger
            trigger: --trigger-http
          - name: test
            entrypoint: test
            trigger: --trigger-resource test --trigger-event google.pubsub.topic.publish
          - name: e2e_clear_individuals
            entrypoint: http_reset_e2e_data
            trigger: --trigger-http --allow-unauthenticated
            project: phaenonet-test
    env:
      VERSION: "${{ matrix.name }}@${{ github.event.inputs.tag && github.event.inputs.tag || github.sha }}"
    environment: ${{ github.event.inputs.project }}
    steps:
      - uses: actions/checkout@v3.5.2
      - name: Work around https://github.com/actions/checkout/issues/766
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1.1.1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1
        with:
          project_id: ${{ env.PROJECT }}
      - name: set release version
        run: |
          echo "set release version: ${{ env.VERSION }}"
          sed -ri 's|"#VERSION#"|"${{ env.VERSION }}"|' env.*.yaml
      - name: undeploy
        run: gcloud functions delete ${{ matrix.name }} --region ${{ env.REGION }} --quiet
        if: ${{ (env.ACTION == 'undeploy' || env.ACTION == 'redeploy') && (matrix.name == env.FUNCTION || env.FUNCTION == 'all') && (matrix.project == env.PROJECT || matrix.project == null) }}
      - name: deploy
        run: gcloud functions deploy ${{ matrix.name }} --entry-point ${{ matrix.entrypoint }} --runtime ${{ env.RUNTIME }} ${{ matrix.trigger }} --timeout ${{ env.TIMEOUT }} --region ${{ env.REGION }} --quiet --env-vars-file env.${{ env.PROJECT }}.yaml
        if: ${{ (env.ACTION == 'deploy' || env.ACTION == 'redeploy') && (matrix.name == env.FUNCTION || env.FUNCTION == 'all') && (matrix.project == env.PROJECT || matrix.project == null) }}
      - name: Sentry release
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          echo "Create new release ${{ env.VERSION }}"
          sentry-cli releases new ${{ env.VERSION }}
          sentry-cli releases set-commits ${{ env.VERSION }} --auto
          sentry-cli releases finalize ${{ env.VERSION }}
          echo "Finalized release ${{ env.VERSION }}"
          echo "Adding deployment for ${{ env.ENVIRONMENT }} environment"
          sentry-cli releases deploys ${{ env.VERSION }} new --env ${{ env.ENVIRONMENT }}
        if: ${{ (env.ACTION == 'deploy' || env.ACTION == 'redeploy') && (matrix.name == env.FUNCTION || env.FUNCTION == 'all') && (matrix.project == env.PROJECT || matrix.project == null) }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: phaenonet
          SENTRY_PROJECT: phaenonet-functions
          ENVIRONMENT: ${{ env.PROJECT == 'phaenonet' && 'production' || 'test' }}
  tag:
    name: Tag
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.tag }}
    permissions:
      contents: write
    steps:
      - name: Tag commit
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: ${{ env.TAG }}
